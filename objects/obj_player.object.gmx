<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_realPlayermask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variable Initalization

m_moveDirection = 0;

m_horizontalSpeed = 0;
m_verticalSpeed = 0;

angle_prev = 0;
angle_next = 0;
angle_diff = 0;

m_shootCooldown = 0;

m_keyLeft = 0;
m_keyRight = 0;
m_keyUp = 0;
m_keyDown = 0;
m_keyShoot = 0;

m_maxSpeed = 8.2;
m_speed = 0;

m_prevX = 0;
m_prevY = 0;
m_prevRot = 0;

m_playerColor = c_white;

m_shieldActive = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// links en rechts om te draaien,
// voor en achter om te schieten
// Hoe verder hoe meer shit
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn the trails

for (i=0; i&lt;2; i+=1)
{
    trail = instance_create(x, y, obj_playerTrail);
    trail.m_id = i;
}  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x, y, obj_playerExplosion);
instance_create(x, y, obj_death);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get the prevs
if (global.paused)
    exit;
    
m_prevX = x;
m_prevY = y;
m_prevRot = m_moveDirection;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cancel update when paused
if (global.paused)
    exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get input

m_keyLeft = (keyboard_check(vk_left) || keyboard_check(ord("A")));
m_keyRight = (keyboard_check(vk_right) || keyboard_check(ord("D")));
m_keyUp = (keyboard_check(vk_up) || keyboard_check(ord("W")));
m_keyDown = (keyboard_check(vk_down) || keyboard_check(ord("S")));
m_keyShoot = (mouse_check_button(mb_left));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculate directions and movement lerp

m_moveDirection = point_direction(x, y, mouse_x, mouse_y);

m_horizontalSpeed = (-m_keyLeft + m_keyRight) * m_maxSpeed;
m_verticalSpeed = (-m_keyUp + m_keyDown) * m_maxSpeed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculate next position and move

var horizontalSpeed = m_horizontalSpeed
var verticalSpeed = m_verticalSpeed

if (place_meeting(x + horizontalSpeed, y + verticalSpeed, obj_collider))
{

    for (i = 0; i &lt; abs(horizontalSpeed); i++)
    {
        if (!place_meeting(x + sign(horizontalSpeed), y, obj_collider))
        {
            x += sign(horizontalSpeed);
        } else break;
    }
    

    for (i = 0; i &lt; abs(verticalSpeed); i++)
    {
        if (!place_meeting(x, y + sign(verticalSpeed), obj_collider))
        {
            y += sign(verticalSpeed);
        } else break;
    }; 
}
else
{
    x += horizontalSpeed// * m_moveMultiplier;
    y += verticalSpeed// * m_moveMultiplier;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot
if(m_shootCooldown &lt; 6 * global.cooldownMultiplier)
    m_shootCooldown += 1 * global.cooldownMultiplier;

if (m_keyShoot &amp;&amp; m_shootCooldown &gt; 5)
{
    m_shootCooldown = 0;
    audio = audio_play_sound(snd_playerShoot, 1 ,0);
    audio_sound_pitch(audio, random_range(0.9, 1.1))
    camera_bump(m_moveDirection);
    
    if (global.playerBullets == 1)
    {
        shoot_bullet(0);
    }
    else
    {
        if(global.playerBullets mod 2 = 0) // even
        {        
            for (i=0; i &lt; global.playerBullets; i++)
            {
                shoot_bullet((i * 10) - 5);
            }
        }
        else // odd
        {
            for (i=0; i &lt; global.playerBullets; i++)
            {
                shoot_bullet((i * 10) - 10);
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for enemy collision

if (place_meeting(x, y, obj_enemy))
{
    if (m_shieldActive)
    {
        m_shieldActive = false;
        instance_create(x, y, obj_shieldExplode);
    }
    else
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw lazer
draw_set_colour(c_red);
draw_line(x, y, 
    x + lengthdir_x(512, m_moveDirection), y + lengthdir_y(512, m_moveDirection))
    draw_line(x-1, y-1, 
    x + lengthdir_x(512, m_moveDirection)-1, y + lengthdir_y(512, m_moveDirection)-1)
    
// Draw player    
draw_sprite_ext(sprite_index, image_index, x, y, 
                image_xscale, image_yscale, m_moveDirection, 
                m_playerColor, image_alpha);

// Draw muzzleflash
draw_sprite_ext(spr_flash, m_shootCooldown, x + lengthdir_x(sprite_width/2, m_moveDirection), 
                y + lengthdir_y(sprite_width/2, m_moveDirection), image_xscale, image_yscale, m_moveDirection, 
                c_white, image_alpha);   
                
// Draw playerShield
if (m_shieldActive)
draw_sprite_ext(spr_playerShield, m_shootCooldown, m_prevX, m_prevY, image_xscale, image_yscale, 
                m_prevRot, m_playerColor, image_alpha);   
                

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
